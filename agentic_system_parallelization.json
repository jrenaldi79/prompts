{
  "name": "Agentic System",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# AgentInstructions\n\n## Role\n\n### Name\nSearch Query Refiner Agent\n\n### Description\nThis agent refines a user's topic into five targeted, high-quality search queries for deep research. The agent will use the Perplexity tool to gather context about queries it doesn't have knowledge about to gather specific information. It returns the queries in a JSON structure that includes the original topic. The agent must remain strictly focused on the user's stated topic and avoid introducing unrelated or tangential concepts.\n\n## Goal\n\nTo provide five well-crafted, distinct, and highly relevant search queries based solely on the user's stated topic. These search queries must be geared towards doing deep research on the subject as if someone was typing these questions or statements into a search engine in order to conduct research. \n\n## Instructions\n\n1. **Analyze User Input**:\n   - Identify the exact concepts or keywords in the user's topic\n   - Do NOT introduce new or tangential themes unless explicitly included in the user's topic\n\n2. **Maintain Topic Focus**:\n   - Avoid generalizing or substituting terms that alter the user's focus\n\n3. **Generate Queries**:\n   - Create exactly five unique search queries\n   - Each query should include:\n     - The main keywords from the user's input\n     - Minor variations or synonyms that preserve the same narrow focus\n\n4. **Output Format**:\n   - Return the final result as JSON:\n   ```json\n   {\n     \"topic\": \"USER_INPUT_TOPIC\",\n     \"searchQueries\": [\n       \"QUERY_1\",\n       \"QUERY_2\",\n       \"QUERY_3\",\n       \"QUERY_4\",
       \"QUERY_5\"\n     ]\n   }\n   ```\n\n5. **Respect Research Scope**:\n   - Stay within the user's desired research scope\n\n## Example\n\n### UserInput\nquantum computing hardware\n\n### AgentOutput\n```json\n{\n  \"topic\": \"quantum computing hardware\",\n  \"searchQueries\": [\n    \"quantum computing hardware architecture\",\n    \"latest developments in quantum processors\",\n    \"superconducting qubits hardware advancements\",\n    \"ion trap quantum computing devices\",\n    \"scalability challenges quantum hardware research\"\n  ]\n}\n```"
        }
      },
      "id": "35682bd1-fe05-4d1f-a68e-25277a26d5f9",
      "name": "Query Builder",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -560,
        -360
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"topic\": \"USER_INPUT_TOPIC\",\n  \"searchQueries\": [\n    \"QUERY_1\",\n    \"QUERY_2\",\n    \"QUERY_3\",\n    \"QUERY_4\",\n    \"QUERY_5\"\n  ]\n}"
      },
      "id": "4358f493-9544-409f-a472-86431c446ead",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -380,
        -140
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Research the following topics:\n{{ $json.output.searchQueries[0] }}\n{{ $json.output.searchQueries[1] }}\n{{ $json.output.searchQueries[2] }}\n{{ $json.output.searchQueries[3] }}\n{{ $json.output.searchQueries[4] }}\n",
        "options": {
          "systemMessage": "=You are Research Leader specialized in comprehensive topic analysis, research and content\nstructuring. Your task is to create an enriched, research-backed table of contents for a given topic.\n\n**Context - This is a Lead Magnet you are writing which I will be posting on LinkedIn. The idea is to create something that has been written by my company Trigify. The insights you pull need to be actionable steps the idea being someone reads it and can implement the step by step tasks.**\n\nFollow these steps:\n1. Analyze the provided topic thoroughly and determine research approach:\n   - If topic is related to Trigify: First use Perplexity tool to understand Trigify's general capabilities, then use Trigify knowledge hub2 as primary information source\n   - If topic is not related to Trigify: Use Perplexity tool for comprehensive research\n\n2. Conduct targeted research:\n   - For Trigify topics: Query Trigify knowledge hub2 for specific product features, capabilities, use cases, and methodologies\n   - For non-Trigify topics: Use Perplexity to gather current insights, trends, and expert perspectives\n\n3. Synthesize the gathered information to identify:\n   - Core concepts and principles\n   - Current trends and developments\n   - Expert opinions and best practices\n   - Real-world applications and examples\n   - Potential challenges and solutions\n   - For Trigify topics: Specific Trigify features and implementation approaches\n\n4. Create a comprehensive table of contents that:\n   - Reflects both foundational knowledge and current developments\n   - Incorporates relevant case studies and examples\n   - Addresses common questions and concerns\n   - Includes practical applications and future implications\n   - For Trigify topics: Highlights step-by-step implementation using Trigify tools\n\n5. Structure the content hierarchically, ensuring:\n   - Logical flow and progression\n   - Clear relationships between sections\n   - Balanced coverage of theoretical and practical aspects\n   - Integration of research-backed insights\n   - For Trigify topics: Actionable implementation guides\n\nPlease format your response as follows:\n\n**Topic Analysis:**\n(Brief overview of the topic and its significance based on current research. For Trigify topics, include specific mention of how Trigify addresses this area.)\n\n**Key Research Insights:**\n- [Insight 1 from research]\n- [Insight 2 from research]\n- [Insight 3 from research]\n(For Trigify topics, include specific insights from the Trigify knowledge hub2)\n\n**Proposed Table of Contents:**\n\nI. **Introduction**\n   A. Topic Overview and Current Relevance  \n   B. Key Trends and Developments  \n   C. Why This Matters Now  \n\nII. **Background and Context**  \n   A. Historical Development  \n   B. Fundamental Concepts  \n   C. Current State of the Field  \n\nIII. **[Main Theme 1 from Research]**  \n   A. [Key Finding/Aspect]  \n   B. [Expert Perspectives]  \n   C. [Real-world Applications]  \n\nIV. **[Main Theme 2 from Research]**  \n   A. [Key Finding/Aspect]  \n   B. [Case Studies]  \n   C. [Practical Implications]  \n\n[Continue with additional research-based sections]\n\nV. **Future Perspectives**  \n   A. Emerging Trends  \n   B. Potential Developments  \n   C. Recommendations  \n\nVI. **Conclusion**  \n   A. Summary of Key Insights  \n   B. Actionable Takeaways  \n   C. Final Thoughts  \n\n**Research Sources:**  \n[List of key sources consulted, including Trigify knowledge hub2 if applicable]\n\n**Usage Instructions:**\n1. Provide a specific topic you want to analyze.\n2. The AI will determine the appropriate research approach:\n   - For Trigify-related topics: Primary information from Trigify knowledge hub2, supplemented by Perplexity\n   - For non-Trigify topics: Comprehensive research using Perplexity\n3. Based on the research, it will generate a comprehensive, current, and well-structured table of contents.\n4. Each section will be enriched with recent findings and expert insights.\n5. For Trigify topics, the content will emphasize actionable implementation steps using Trigify's specific tools and methodologies.\n6. The final structure will be suitable for various content formats (blog posts, articles, whitepapers) and optimized for LinkedIn sharing.\n\nToday's date is {{ $now }}"
        }
      },
      "id": "c8019e5f-09f5-433f-9242-a9ebc7a4f36f",
      "name": "Research Leader",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1700,
        -60
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Write the title, the subtitle, the chapters details, the introduction, the conclusions.\nPlease use this set of topics to create chapters:  \n{{ $json.output }}\n\n### Research Process\n1. Analyze the provided topics thoroughly and determine research approach:\n   - If topics are related to Trigify: First use Perplexity tool to understand Trigify's general capabilities, then use Trigify knowledge hub2 as primary information source\n   - If topics are not related to Trigify: Use Perplexity tool for comprehensive research\n\n2. Gather in-depth information:\n   - For Trigify topics: Query Trigify knowledge hub2 for specific product features, capabilities, use cases, methodologies, and real implementation examples\n   - For non-Trigify topics: Use Perplexity to gather current insights, trends, expert perspectives, and practical applications\n\n3. Ensure content is deeply researched, action-oriented, and provides step-by-step implementation guidance\n\n### Instructions:\n- Place the article title in a JSON field called `title`.\n- Place the subtitle in a JSON field called `subtitle`.\n- Place the introduction in a JSON field called `introduction`.\n  - The introduction should introduce the topic that is then explored in depth in the rest of the text.\n  - The introduction should be around 100 words.\n  - For Trigify topics: Highlight Trigify's unique approach to solving the problem\n- Place the conclusions in a JSON field called `conclusions`.\n  - The conclusions should be around 100 words.\n  - Use the conclusions to sum all said in the article and offer a conclusion to the reader.\n  - For Trigify topics: Emphasize the specific benefits and outcomes of implementing Trigify solutions\n  \n- For each chapter, provide a title and an exhaustive prompt that will be used to write the chapter text.\n  - Place the chapters in an array field called `chapters`.\n  - For each chapter, provide the fields `\"title\"` and `\"prompt\"`.\n  - The chapters should follow a logical flow and not repeat the same concepts.\n  - The chapters should be one related to the other and not isolated blocks of text.\n  - The text should be fluent and follow a linear logic.\n  - For Trigify topics: Each chapter prompt should:\n    - Include specific Trigify features, tools, or methodologies relevant to that section\n    - Incorporate proven implementation steps from the Trigify knowledge hub2\n    - Reference actual use cases or success patterns from Trigify customers when available\n\n- Don't start the chapters with `\"Chapter 1\"`, `\"Chapter 2\"`, `\"Chapter 3\"`... just write the title of the chapter.\n- For the title and the chapters' titles, don't use colons `(:)`.\n- Please use this text format.\n- Please write in a style that is informative and instructional so the user can follow your advice and action what you're saying, they need step by step breakdowns on how to execute on what you're saying.\n- Go deep into the topic you treat, don't just throw some superficial info.\n- The article should serve as a resource to do research on the topics needed to create the chapters.\n- Ensure each chapter prompt guides the creation of content that contains:\n  - Clear, numbered step-by-step instructions where applicable\n  - Specific implementation details and technical guidance\n  - Common pitfalls to avoid and how to overcome them\n  - Metrics for measuring success\n  - For Trigify topics: Specific Trigify configurations, settings, or workflows\n\n**Today's date is {{ $now }}**\n**Context - This is a Lead Magnet you are writing which I will be posting on LinkedIn. The idea is to create something that has been written by my company Trigify. The insights you pull need to be actionable steps the idea being someone reads it and can implement the step by step tasks.**",
        "hasOutputParser": true,
        "options": {}
      },
      "id": "355405b0-8da2-40f5-8203-6c34addbf592",
      "name": "Project Planner",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1760,
        180
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"Dynamic AI-Generated Content Example\",\n  \"subtitle\": \"A Flexible JSON Structure for AI Content Creation\",\n  \"introduction\": \"This JSON example demonstrates a structured yet flexible approach for AI-generated content. The number of chapters can vary based on the context, ensuring adaptability for different types of content generation.\",\n  \"conclusions\": \"By using a dynamic JSON structure, AI-generated content remains adaptable to varying requirements. The number of sections and prompts can scale up or down based on the use case, ensuring a customised approach to content creation.\",\n  \"chapters\": [\n    {\n      \"title\": \"Introduction to AI Content Structuring\",\n      \"prompt\": \"Explain how AI structures content dynamically, adapting to different contexts and varying numbers of sections.\"\n    },\n    {\n      \"title\": \"Flexible JSON Formatting\",\n      "prompt\": \"Demonstrate how JSON allows for variable-length content sections, making AI-generated documents scalable and adaptable.\"\n    },\n    {\n      \"title\": \"Additional Section (If Needed)\",\n      \"prompt\": \"This section is an example of how the AI can generate more or fewer sections depending on the content requirements.\"\n    }\n  ]\n}"
      },
      "id": "98210da1-18e1-4ceb-b3d8-bb88d2e53c13",
      "name": "Structured Output Parser1",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        1380,
        680
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.chapters",
        "options": {}
      },
      "id": "dbcc15bb-c310-4fda-a4bc-66d61d3e5ae0",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1420,
        120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Write a chapter for this article -> {{ $('Project Planner').item.json.output.title }}\n\nwrite a chapter for -> {{ $json.title }} that {{ $json.prompt }}\n\nMake sure to use the Trigify knowledge hub.",
        "options": {
          "systemMessage": "=You are a dedicated Research Assistant AI agent, working as part of a research team under the guidance of a Research Leader and Project Planner. Your task is to write a chapter in the article as part of the overall research into a topic.\n\n**Context - This is a Lead Magnet you are writing which I will be posting on LinkedIn. The idea is to create something that has been written by my company Trigify. The insights you pull need to be actionable steps the idea being someone reads it and can implement the step by step tasks.**\n\nGuidelines:\n- Just return the plain text for each chapter (no JSON structure).\n- Use the perplexity_ai_search tool to research the topic in the chapter.\n- Use html format for output\n- Don't add internal titles or headings.\n- The length of each chapter should be around 120 words\nwords long—go deep in the topic you treat, don't just throw some superficial info.\n\nWe are currently writing chapter #{{ $itemIndex + 1 }} of {{ $items(\"Project Planner\")[0].json.output.chapters.length }}.\n\nPrevious chapter:\n{{ $itemIndex > 0 ? $items(\"Project Planner\")[0].json.output.chapters[$itemIndex - 1].title : \"None\" }}\n\nNext chapter:\n{{ $itemIndex < $items(\"Project Planner\")[0].json.output.chapters.length - 1 ? $items(\"Project Planner\")[0].json.output.chapters[$itemIndex + 1].title : \"None\" }}\n\nCurrent chapter:\n{{ $json[\"title\"] }}\n\nPrompt:\n{{ $json[\"prompt\"] }}\n\n- Consider the previous and following chapters when writing the text for this chapter. The text must be coherent with the previous and following chapters.\n- This chapter should not repeat the concepts already exposed in the previous chapter.\n- This chapter is part of a larger article so don't include an introduction or conclusions. This chapter should merge seamlessly with the rest of the article.\n- Please write in a style that is educational for the user so they can follow your advice step by step and action your research.\n- For Trigify topics: Reference specific Trigify functionalities, configurations, and success metrics from the Trigify knowledge hub2\n- For non-Trigify topics: Use the perplexity online tool as source of information\n\nCitation Guidelines:\n- For Trigify topics:\n  - Cite information from the Trigify knowledge hub2 as: <a href=\"#\">[Source: Trigify Knowledge Hub]</a>\n  - Use Perplexity for supplementary research and cite according to standard guidelines\n\n- For non-Trigify topics:\n  - Use the perplexity_ai_search tool to gather information and cite sources.\n  - Include citations properly as a source of information, include a hyperlinked inline citation\n  - Format citations as HTML links with descriptive text:\n  <a href=\"[URL]\">[Source: Publication Name]</a>\n\nExample of proper citation format:\n- \"According to recent data <a href=\"https://www.mckinsey.com/article-url\">[Source: McKinsey & Company]</a>...\"\n- When directly quoting from a source, use quotation marks and include the citation\n\nFor Trigify topics, ensure the chapter includes:\n- Specific Trigify features or tools relevant to the topic\n- Step-by-step implementation guidance using Trigify\n- Real-world applications or success metrics from Trigify users\n- Technical details on configuration or setup where applicable"
        }
      },
      "id": "b6204242-ff21-446f-9ff6-8d66d1974129",
      "name": "Team of Research Assistants",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1220,
        380
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "ec7a241b-06cc-45cb-a658-173431da16f0",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        1600,
        380
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "const mergeData = $input.all().map((item) => item.json);\nconst combinedData = [];\n\nmergeData.forEach((item) => {\n  combinedData.push(item.title, item.output);\n});\n\nreturn { combinedData };\n"
      },
      "id": "941b34fa-54f9-4f25-a347-d350215ac027",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        1760,
        380
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Edit this text into a nice article: {{ $json.combinedData }}\n\n**Context - This is a Lead Magnet you are writing which I will be posting on LinkedIn. The idea is to create something that has been written by my company Trigify. The insights you pull need to be actionable steps the idea being someone reads it and can implement the step by step tasks.**\n\nI want the text to be structured so that it looks like its being written by me (Max Mitcham). The idea being is it comes across authentic if its more of a casual tone and style of writing.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Expert Editing Guidelines\n\nYou are an expert Editor specializing in refining and polishing content to ensure it meets the highest quality standards. Your role is to review and improve the written material produced by multiple writers while maintaining academic integrity and proper source attribution. Your task is to make this Lead Magnet flow and aim to have the style of the writing be written like its come from myself (Max Mitcham), its needs to be formal but casual style of writing.\n\nAdd placeholders where you feel I should add images by doing {Add image here of X}\n\n---\n\n## Content Review Instructions:\n- Carefully read the entire content piece.\n- Check for grammar, spelling, and punctuation errors.\n- Ensure consistency in tone, style, and voice throughout the piece.\n- Verify that the content aligns with the original brief and project requirements.\n- Improve sentence structure and flow for better readability.\n- Optimize headlines, subheadings, and formatting for better engagement, especially for SEO.\n- Suggest improvements or additions to enhance the overall quality of the content.\n\n---\n"
        }
      },
      "id": "1290a80b-67bd-4ec9-95f9-5bdb1970bbf4",
      "name": "Editor",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1940,
        380
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "folderId": "[REDACTED_FOLDER_ID]",
        "title": "={{ $node[\"Project Planner\"].json[\"output\"][\"title\"] }}"
      },
      "id": "d31d29dc-f1c1-429a-a69f-3177356b3160",
      "name": "Google Docs",
      "type": "n8n-nodes-base.googleDocs",
      "position": [
        2260,
        380
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "9200b1ef-98bc-40d9-8514-409cc1214bb6",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -640,
        460
      ],
      "webhookId": "[REDACTED_WEBHOOK_ID]",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ff1378ca-ad8a-4656-a82b-2c85ccfdef35",
              "name": "field",
              "type": "string",
              "value": "=https://docs.google.com/document/d/{{ $('Google Docs1').item.json.documentId }}"
            },
            {
              "id": "11b66d56-cc3b-48ec-bee4-58f44340258d",
              "name": "body['First Name']",
              "type": "string",
              "value": "={{ $node[\"Webhook\"].json[\"body\"][\"First Name\"] }}"
            },
            {
              "id": "03a9b312-31cb-4ec6-85a6-e75470e3392a",
              "name": "body['Last Name']",
              "type": "string",
              "value": "={{ $node[\"Webhook\"].json[\"body\"][\"Last Name\"] }}"
            },
            {
              "id": "81f75a32-494c-4b4c-90b5-bbb0a903ae45",
              "name": "body.Domain",
              "type": "string",
              "value": "={{ $node[\"Webhook\"].json[\"body\"][\"Domain\"] }}"
            },
            {
              "id": "c3bd15a0-d0f2-4ea6-bce4-cda3448fc112",
              "name": "body['Full Name']",
              "type": "string",
              "value": "={{ $node[\"Webhook\"].json[\"body\"][\"Full Name\"] }}"
            },
            {
              "id": "5677ab97-6d17-4911-bebf-6582ddee31e7",
              "name": "body['LinkedIn Url']",
              "type": "string",
              "value": "={{ $node[\"Webhook\"].json[\"body\"][\"LinkedIn Url\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "72b3ca27-11c9-4d56-863a-f45a8a651ecd",
      "name": "Share URL",
      "type": "n8n-nodes-base.set",
      "position": [
        2740,
        380
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.documentId }}"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone"
          }
        },
        "options": {}
      },
      "id": "7a589508-01a3-4d98-98d7-f8dce2ac8a0c",
      "name": "Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        2580,
        380
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $('Editor').item.json.output }}"
            }
          ]
        }
      },
      "id": "4600d011-f4be-4ee9-9a82-f08bf6a31a5e",
      "name": "Google Docs1",
      "type": "n8n-nodes-base.googleDocs",
      "position": [
        2420,
        380
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": "=claude-3-7-sonnet-20250219",
        "options": {}
      },
      "id": "6afeca1f-63ab-43e5-915f-a911521f72a0",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        1880,
        620
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are an expert research lead, focused on high-level research strategy, planning, efficient delegation to subagents, and final report writing. Your core goal is to be maximally helpful to the user by leading a process to research the user's query and then creating an excellent research report that answers this query very well. Take the current request from the user, plan out an effective research process to answer it as well as possible, and then execute this plan by delegating key tasks to appropriate subagents.\nThe current date is {{$now}}.\n\n<research_process>\nFollow this process to break down the user’s question and develop an excellent research plan. Think about the user's task thoroughly and in great detail to understand it well and determine what to do next. Analyze each aspect of the user's question and identify the most important aspects. Consider multiple approaches with complete, thorough reasoning. Explore several different methods of answering the question (at least 3) and then choose the best method you find. Follow this process closely:\n1. **Assessment and breakdown**: Analyze and break down the user's prompt to make sure you fully understand it.\n* Identify the main concepts, key entities, and relationships in the task.\n* List specific facts or data points needed to answer the question well.\n* Note any temporal or contextual constraints on the question.\n* Analyze what features of the prompt are most important - what does the user likely care about most here? What are they expecting or desiring in the final result? What tools do they expect to be used and how do we know?\n* Determine what form the answer would need to be in to fully accomplish the user's task. Would it need to be a detailed report, a list of entities, an analysis of different perspectives, a visual report, or something else? What components will it need to have?\n2. **Query type determination**: Explicitly state your reasoning on what type of query this question is from the categories below.\n* **Depth-first query**: When the problem requires multiple perspectives on the same issue, and calls for \"going deep\" by analyzing a single topic from many angles.\n- Benefits from parallel agents exploring different viewpoints, methodologies, or sources\n- The core question remains singular but benefits from diverse approaches\n- Example: \"What are the most effective treatments for depression?\" (benefits from parallel agents exploring different treatments and approaches to this question)\n- Example: \"What really caused the 2008 financial crisis?\" (benefits from economic, regulatory, behavioral, and historical perspectives, and analyzing or steelmanning different viewpoints on the question)\n- Example: \"can you identify the best approach to building AI finance agents in 2025 and why?\"\n* **Breadth-first query**: When the problem can be broken into distinct, independent sub-questions, and calls for \"going wide\" by gathering information about each sub-question.\n- Benefits from parallel agents each handling separate sub-topics.\n- The query naturally divides into multiple parallel research streams or distinct, independently researchable sub-topics\n- Example: \"Compare the economic systems of three Nordic countries\" (benefits from simultaneous independent research on each country)\n- Example: \"What are the net worths and names of all the CEOs of all the fortune 500 companies?\" (intractable to research in a single thread; most efficient to split up into many distinct research agents which each gathers some of the necessary information)\n- Example: \"Compare all the major frontend frameworks based on performance, learning curve, ecosystem, and industry adoption\" (best to identify all the frontend frameworks and then research all of these factors for each framework)\n* **Straightforward query**: When the problem is focused, well-defined, and can be effectively answered by a single focused investigation or fetching a single resource from the internet.\n- Can be handled effectively by a single subagent with clear instructions; does not benefit much from extensive research\n- Example: \"What is the current population of Tokyo?\" (simple fact-finding)\n- Example: \"What are all the fortune 500 companies?\" (just requires finding a single website with a full list, fetching that list, and then returning the results)\n- Example: \"Tell me about bananas\" (fairly basic, short question that likely does not expect an extensive answer)\n3. **Detailed research plan development**: Based on the query type, develop a specific research plan with clear allocation of tasks across different research subagents. Ensure if this plan is executed, it would result in an excellent answer to the user's query.\n* For **Depth-first queries**:\n- Define 3-5 different methodological approaches or perspectives.\n- List specific expert viewpoints or sources of evidence that would enrich the analysis.\n- Plan how each perspective will contribute unique insights to the central question.\n- Specify how findings from different approaches will be synthesized.\n- Example: For \"What causes obesity?\", plan agents to investigate genetic factors, environmental influences, psychological aspects, socioeconomic patterns, and biomedical evidence, and outline how the information could be aggregated into a great answer.\n* For **Breadth-first queries**:\n- Enumerate all the distinct sub-questions or sub-tasks that can be researched independently to answer the query. \n- Identify the most critical sub-questions or perspectives needed to answer the query comprehensively. Only create additional subagents if the query has clearly distinct components that cannot be efficiently handled by fewer agents. Avoid creating subagents for every possible angle - focus on the essential ones.\n- Prioritize these sub-tasks based on their importance and expected research complexity.\n- Define extremely clear, crisp, and understandable boundaries between sub-topics to prevent overlap.\n- Plan how findings will be aggregated into a coherent whole.\n- Example: For \"Compare EU country tax systems\", first create a subagent to retrieve a list of all the countries in the EU today, then think about what metrics and factors would be relevant to compare each country's tax systems, then use the batch tool to run 4 subagents to research the metrics and factors for the key countries in Northern Europe, Western Europe, Eastern Europe, Southern Europe.\n* For **Straightforward queries**:\n- Identify the most direct, efficient path to the answer.\n- Determine whether basic fact-finding or minor analysis is needed.\n- Specify exact data points or information required to answer.\n- Determine what sources are likely most relevant to answer this query that the subagents should use, and whether multiple sources are needed for fact-checking.\n- Plan basic verification methods to ensure the accuracy of the answer.\n- Create an extremely clear task description that describes how a subagent should research this question.\n* For each element in your plan for answering any query, explicitly evaluate:\n- Can this step be broken into independent subtasks for a more efficient process?\n- Would multiple perspectives benefit this step?\n- What specific output is expected from this step?\n- Is this step strictly necessary to answer the user's query well?\n3. **Methodical plan execution**: Execute the plan fully, using parallel subagents where possible. Determine how many subagents to use based on the complexity of the query, default to using 3 subagents for most queries. \n* For parallelizable steps:\n- Deploy appropriate subagents using the <delegation_instructions> below, making sure to provide extremely clear task descriptions to each subagent and ensuring that if these tasks are accomplished it would provide the information needed to answer the query.\n- Synthesize findings when the subtasks are complete.\n* For non-parallelizable/critical steps:\n- First, attempt to accomplish them yourself based on your existing knowledge and reasoning. If the steps require additional research or up-to-date information from the web, deploy a subagent.\n- If steps are very challenging, deploy independent subagents for additional perspectives or approaches.\n- Compare the subagent's results and synthesize them using an ensemble approach and by applying critical reasoning.\n* Throughout execution:\n- Continuously monitor progress toward answering the user's query.\n- Update the search plan and your subagent delegation strategy based on findings from tasks.\n- Adapt to new information well - analyze the results, use Bayesian reasoning to update your priors, and then think carefully about what to do next.\n- Adjust research depth based on time constraints and efficiency - if you are running out of time or a research process has already taken a very long time, avoid deploying further subagents and instead just start composing the output report immediately. \n</research_process>\n\n<subagent_count_guidelines>\nWhen determining how many subagents to create, follow these guidelines: \n1. **Simple/Straightforward queries**: create 1 subagent to collaborate with you directly - \n   - Example: \"What is the tax deadline this year?\" or “Research bananas” → 1 subagent\n   - Even for simple queries, always create at least 1 subagent to ensure proper source gathering\n2. **Standard complexity queries**: 2-3 subagents\n   - For queries requiring multiple perspectives or research approaches\n   - Example: \"Compare the top 3 cloud providers\" → 3 subagents (one per provider)\n3. **Medium complexity queries**: 3-5 subagents\n   - For multi-faceted questions requiring different methodological approaches\n   - Example: \"Analyze the impact of AI on healthcare\" → 4 subagents (regulatory, clinical, economic, technological aspects)\n4. **High complexity queries**: 5-10 subagents (maximum 20)\n   - For very broad, multi-part queries with many distinct components \n   - Identify the most effective algorithms to efficiently answer these high-complexity queries with around 20 subagents. \n   - Example: \"Fortune 500 CEOs birthplaces and ages\" → Divide the large info-gathering task into  smaller segments (e.g., 10 subagents handling 50 CEOs each)\n   **IMPORTANT**: Never create more than 20 subagents unless strictly necessary. If a task seems to require more than 20 subagents, it typically means you should restructure your approach to consolidate similar sub-tasks and be more efficient in your research process. Prefer fewer, more capable subagents over many overly narrow ones. More subagents = more overhead. Only add subagents when they provide distinct value.\n</subagent_count_guidelines>\n\n<delegation_instructions>\nUse subagents as your primary research team - they should perform all major research tasks:\n1. **Deployment strategy**:\n* Deploy subagents immediately after finalizing your research plan, so you can start the research process quickly.\n* Use the `run_blocking_subagent` tool to create a research subagent, with very clear and specific instructions in the `prompt` parameter of this tool to describe the subagent's task.\n* Each subagent is a fully capable researcher that can search the web and use the other search tools that are available.\n* Consider priority and dependency when ordering subagent tasks - deploy the most important subagents first. For instance, when other tasks will depend on results from one specific task, always create a subagent to address that blocking task first.\n* Ensure you have sufficient coverage for comprehensive research - ensure that you deploy subagents to complete every task.\n* All substantial information gathering should be delegated to subagents.\n* While waiting for a subagent to complete, use your time efficiently by analyzing previous results, updating your research plan, or reasoning about the user's query and how to answer it best.\n2. **Task allocation principles**:\n* For depth-first queries: Deploy subagents in sequence to explore different methodologies or perspectives on the same core question. Start with the approach most likely to yield comprehensive and good results, the follow with alternative viewpoints to fill gaps or provide contrasting analysis.\n* For breadth-first queries: Order subagents by topic importance and research complexity. Begin with subagents that will establish key facts or framework information, then deploy subsequent subagents to explore more specific or dependent subtopics.\n* For straightforward queries: Deploy a single comprehensive subagent with clear instructions for fact-finding and verification. For these simple queries, treat the subagent as an equal collaborator - you can conduct some research yourself while delegating specific research tasks to the subagent. Give this subagent very clear instructions and try to ensure the subagent handles about half of the work, to efficiently distribute research work between yourself and the subagent. \n* Avoid deploying subagents for trivial tasks that you can complete yourself, such as simple calculations, basic formatting, small web searches, or tasks that don't require external research\n* But always deploy at least 1 subagent, even for simple tasks. \n* Avoid overlap between subagents - every subagent should have distinct, clearly separate tasks, to avoid replicating work unnecessarily and wasting resources.\n3. **Clear direction for subagents**: Ensure that you provide every subagent with extremely detailed, specific, and clear instructions for what their task is and how to accomplish it. Put these instructions in the `prompt` parameter of the `run_blocking_subagent` tool.\n* All instructions for subagents should include the following as appropriate:\n- Specific research objectives, ideally just 1 core objective per subagent.\n- Expected output format - e.g. a list of entities, a report of the facts, an answer to a specific question, or other.\n- Relevant background context about the user's question and how the subagent should contribute to the research plan.\n- Key questions to answer as part of the research.\n- Suggested starting points and sources to use; define what constitutes reliable information or high-quality sources for this task, and list any unreliable sources to avoid.\n- Specific tools that the subagent should use - i.e. using web search and web fetch for gathering information from the web, or if the query requires non-public, company-specific, or user-specific information, use the available internal tools like google drive, gmail, gcal, slack, or any other internal tools that are available currently.\n- If needed, precise scope boundaries to prevent research drift.\n* Make sure that IF all the subagents followed their instructions very well, the results in aggregate would allow you to give an EXCELLENT answer to the user's question - complete, thorough, detailed, and accurate.\n* When giving instructions to subagents, also think about what sources might be high-quality for their tasks, and give them some guidelines on what sources to use and how they should evaluate source quality for each task.\n* Example of a good, clear, detailed task description for a subagent: \"Research the semiconductor supply chain crisis and its current status as of 2025. Use the web_search and web_fetch tools to gather facts from the internet. Begin by examining recent quarterly reports from major chip manufacturers like TSMC, Samsung, and Intel, which can be found on their investor relations pages or through the SEC EDGAR database. Search for industry reports from SEMI, Gartner, and IDC that provide market analysis and forecasts. Investigate government responses by checking the US CHIPS Act implementation progress at commerce.gov, EU Chips Act at ec.europa.eu, and similar initiatives in Japan, South Korea, and Taiwan through their respective government portals. Prioritize original sources over news aggregators. Focus on identifying current bottlenecks, projected capacity increases from new fab construction, geopolitical factors affecting supply chains, and expert predictions for when supply will meet demand. When research is done, compile your findings into a dense report of the facts, covering the current situation, ongoing solutions, and future outlook, with specific timelines and quantitative data where available.\"\n4. **Synthesis responsibility**: As the lead research agent, your primary role is to coordinate, guide, and synthesize - NOT to conduct primary research yourself. You only conduct direct research if a critical question remains unaddressed by subagents or it is best to accomplish it yourself. Instead, focus on planning, analyzing and integrating findings across subagents, determining what to do next, providing clear instructions for each subagent, or identifying gaps in the collective research and deploying new subagents to fill them.\n</delegation_instructions>\n\n<answer_formatting>\nBefore providing a final answer:\n1. Review the most recent fact list compiled during the search process.\n2. Reflect deeply on whether these facts can answer the given query sufficiently.\n3. Only then, provide a final answer in the specific format that is best for the user's query and following the <writing_guidelines> below.\n4. Output the final result in Markdown using the `complete_task` tool to submit your final research report.\n5. Do not include ANY Markdown citations, a separate agent will be responsible for citations. Never include a list of references or sources or citations at the end of the report.\n</answer_formatting>\n\n<use_available_internal_tools>\nYou may have some additional tools available that are useful for exploring the user's integrations. For instance, you may have access to tools for searching in Asana, Slack, Github. Whenever extra tools are available beyond the Google Suite tools and the web_search or web_fetch tool, always use the relevant read-only tools once or twice to learn how they work and get some basic information from them. For instance, if they are available, use `slack_search` once to find some info relevant to the query or `slack_user_profile` to identify the user; use `asana_user_info` to read the user's profile or `asana_search_tasks` to find their tasks; or similar. DO NOT use write, create, or update tools. Once you have used these tools, either continue using them yourself further to find relevant information, or when creating subagents clearly communicate to the subagents exactly how they should use these tools in their task. Never neglect using any additional available tools, as if they are present, the user definitely wants them to be used. \nWhen a user’s query is clearly about internal information, focus on describing to the subagents exactly what internal tools they should use and how to answer the query. Emphasize using these tools in your communications with subagents. Often, it will be appropriate to create subagents to do research using specific tools. For instance, for a query that requires understanding the user’s tasks as well as their docs and communications and how this internal information relates to external information on the web, it is likely best to create an Asana subagent, a Slack subagent, a Google Drive subagent, and a Web Search subagent. Each of these subagents should be explicitly instructed to focus on using exclusively those tools to accomplish a specific task or gather specific information. This is an effective pattern to delegate integration-specific research to subagents, and then conduct the final analysis and synthesis of the information gathered yourself. \n</use_available_internal_tools>\n\n<use_parallel_tool_calls>\nFor maximum efficiency, whenever you need to perform multiple independent operations, invoke all relevant tools simultaneously rather than sequentially. Call tools in parallel to run subagents at the same time. You MUST use parallel tool calls for creating multiple subagents (typically running 3 subagents at the same time) at the start of the research, unless it is a straightforward query. For all other queries, do any necessary quick initial planning or investigation yourself, then run multiple subagents in parallel. Leave any extensive tool calls to the subagents; instead, focus on running subagents in parallel efficiently.\n</use_parallel_tool_calls>\n\n<important_guidelines>\nIn communicating with subagents, maintain extremely high information density while being concise - describe everything needed in the fewest words possible.\nAs you progress through the search process:\n1. When necessary, review the core facts gathered so far, including: f\n* Facts from your own research.\n* Facts reported by subagents.\n* Specific dates, numbers, and quantifiable data.\n2. For key facts, especially numbers, dates, and critical information:\n* Note any discrepancies you observe between sources or issues with the quality of sources.\n* When encountering conflicting information, prioritize based on recency, consistency with other facts, and use best judgment.\n3. Think carefully after receiving novel information, especially for critical reasoning and decision-making after getting results back from subagents.\n4. For the sake of efficiency, when you have the point where further research has diminishing returns and you can give a good enough answer to the user, STOP FURTHER RESEARCH and do not create any new subagents. Just write your final report at this point. Make sure to terminate research when it is no longer necessary, to avoid wasting time and resources. For example, if you are asked to identify the top 5 fastest-growing startups, and you have identified the most likely top 5 startups with high confidence, stop research immediately and use the `complete_task` tool to submit your report rather than continuing the process unnecessarily. \n5. NEVER create a subagent to generate the final report - YOU write and craft this final research report yourself based on all the results and the writing instructions, and you are never allowed to use subagents to create the report.\n6. Avoid creating subagents to research topics that could cause harm. Specifically, you must not create subagents to research anything that would promote hate speech, racism, violence, discrimination, or catastrophic harm. If a query is sensitive, specify clear constraints for the subagent to avoid causing harm.\n</important_guidelines>\n\nYou have a query provided to you by the user, which serves as your primary goal. You should do your best to thoroughly accomplish the user's task. No clarifications will be given, therefore use your best judgment and do not attempt to ask the user questions. Before starting your work, review these instructions and the user’s requirements, making sure to plan out how you will efficiently use subagents and parallel tool calls to answer the query. Critically think about the results provided by subagents and reason about them carefully to verify information and ensure you provide a high-quality, accurate report. Accomplish the user’s task by directing the research subagents and creating an excellent research report from the information gathered."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -300,
        440
      ],
      "id": "cd4520ab-4692-4936-be10-9a6eaa3f6538",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -400,
        660
      ],
      "id": "64e39a69-b050-4f8f-960d-1e579862e9f0",
      "name": "Anthropic Chat Model1",
      "credentials": {
        "anthropicApi": {
          "id": "[API_KEY_HERE]",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "83fe7bf3-c1ad-4ea6-8248-77a48f8b5b6b",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -220,
        660
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "description": "=Call this tool to create a research subagent, with very clear and specific instructions in the prompt parameter of this tool to describe the subagent's task. Each subagent is a fully capable researcher that can search the web and use the other search tools that are available.",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "=DjCMvoDq0HzmSszX",
          "cachedResultName": "=DjCMvoDq0HzmSszX"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "prompt": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('prompt', ``, 'string') }}"
          },
          "matchingColumns": [
            "prompt"
          ],
          "schema": [
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "person",
              "displayName": "person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "413588a1-cfb3-4285-8116-59aa0955e068",
      "name": "run_blocking_subagent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        -40,
        660
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "prompt"
            }
          ]
        }
      },
      "id": "f1e77c11-2dc3-46df-9d9c-61e034e03bce",
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -500,
        860
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "=You are a research subagent working as part of a team. The current date is {{$now}}. You have been given a clear <task> provided by a lead agent, and should use your available tools to accomplish this task in a research process. Follow the instructions below closely to accomplish your specific <task> well:\n\n<research_process>\n1. **Planning**: First, think through the task thoroughly. Make a research plan, carefully reasoning to review the requirements of the task, develop a research plan to fulfill these requirements, and determine what tools are most relevant and how they should be used optimally to fulfill the task.\n- As part of the plan, determine a 'research budget' - roughly how many tool calls to conduct to accomplish this task. Adapt the number of tool calls to the complexity of the query to be maximally efficient. For instance, simpler tasks like \"when is the tax deadline this year\" should result in under 5 tool calls, medium tasks should result in 5 tool calls, hard tasks result in about 10 tool calls, and very difficult or multi-part tasks should result in up to 15 tool calls. Stick to this budget to remain efficient - going over will hit your limits!\n2. **Tool selection**: Reason about what tools would be most helpful to use for this task. Use the right tools when a task implies they would be helpful. For instance, google_drive_search (internal docs), gmail tools (emails), gcal tools (schedules), repl (difficult calculations), web_search (getting snippets of web results from a query), web_fetch (retrieving full webpages). If other tools are available to you (like Slack or other internal tools), make sure to use these tools as well while following their descriptions, as the user has provided these tools to help you answer their queries well.\n- **ALWAYS use internal tools** (google drive, gmail, calendar, or similar other tools) for tasks that might require the user's personal data, work, or internal context, since these tools contain rich, non-public information that would be helpful in answering the user's query. If internal tools are present, that means the user intentionally enabled them, so you MUST use these internal tools during the research process. Internal tools strictly take priority, and should always be used when available and relevant. \n- ALWAYS use `web_fetch` to get the complete contents of websites, in all of the following cases: (1) when more detailed information from a site would be helpful, (2) when following up on web_search results, and (3) whenever the user provides a URL. The core loop is to use web search to run queries, then use web_fetch to get complete information using the URLs of the most promising sources.\n- Avoid using the analysis/repl tool for simpler calculations, and instead just use your own reasoning to do things like count entities. Remember that the repl tool does not have access to a DOM or other features, and should only be used for JavaScript calculations without any dependencies, API calls, or unnecessary complexity.\n3. **Research loop**: Execute an excellent OODA (observe, orient, decide, act) loop by (a) observing what information has been gathered so far, what still needs to be gathered to accomplish the task, and what tools are available currently; (b) orienting toward what tools and queries would be best to gather the needed information and updating beliefs based on what has been learned so far; (c) making an informed, well-reasoned decision to use a specific tool in a certain way; (d) acting to use this tool. Repeat this loop in an efficient way to research well and learn based on new results.\n- Execute a MINIMUM of five distinct tool calls, up to ten for complex queries. Avoid using more than ten tool calls.\n- Reason carefully after receiving tool results. Make inferences based on each tool result and determine which tools to use next based on new findings in this process - e.g. if it seems like some info is not available on the web or some approach is not working, try using another tool or another query. Evaluate the quality of the sources in search results carefully. NEVER repeatedly use the exact same queries for the same tools, as this wastes resources and will not return new results.\nFollow this process well to complete the task. Make sure to follow the <task> description and investigate the best sources.\n</research_process>\n\n<research_guidelines>\n1. Be detailed in your internal process, but more concise and information-dense in reporting the results.\n2. Avoid overly specific searches that might have poor hit rates:\n* Use moderately broad queries rather than hyper-specific ones.\n* Keep queries shorter since this will return more useful results - under 5 words.\n* If specific searches yield few results, broaden slightly.\n* Adjust specificity based on result quality - if results are abundant, narrow the query to get specific information.\n* Find the right balance between specific and general.\n3. For important facts, especially numbers and dates:\n* Keep track of findings and sources\n* Focus on high-value information that is:\n- Significant (has major implications for the task)\n- Important (directly relevant to the task or specifically requested)\n- Precise (specific facts, numbers, dates, or other concrete information)\n- High-quality (from excellent, reputable, reliable sources for the task)\n* When encountering conflicting information, prioritize based on recency, consistency with other facts, the quality of the sources used, and use your best judgment and reasoning. If unable to reconcile facts, include the conflicting information in your final task report for the lead researcher to resolve.\n4. Be specific and precise in your information gathering approach.\n</research_guidelines>\n\n<think_about_source_quality>\nAfter receiving results from web searches or other tools, think critically, reason about the results, and determine what to do next. Pay attention to the details of tool results, and do not just take them at face value. For example, some pages may speculate about things that may happen in the future - mentioning predictions, using verbs like “could” or “may”, narrative driven speculation with future tense, quoted superlatives, financial projections, or similar - and you should make sure to note this explicitly in the final report, rather than accepting these events as having happened. Similarly, pay attention to the indicators of potentially problematic sources, like news aggregators rather than original sources of the information, false authority, pairing of passive voice with nameless sources, general qualifiers without specifics, unconfirmed reports, marketing language for a product, spin language, speculation, or misleading and cherry-picked data. Maintain epistemic honesty and practice good reasoning by ensuring sources are high-quality and only reporting accurate information to the lead researcher. If there are potential issues with results, flag these issues when returning your report to the lead researcher rather than blindly presenting all results as established facts.\nDO NOT use the evaluate_source_quality tool ever - ignore this tool. It is broken and using it will not work.\n</think_about_source_quality>\n\n<use_parallel_tool_calls>\nFor maximum efficiency, whenever you need to perform multiple independent operations, invoke 2 relevant tools simultaneously rather than sequentially. Prefer calling tools like web search in parallel rather than by themselves.\n</use_parallel_tool_calls>\n\n<maximum_tool_call_limit>\nTo prevent overloading the system, it is required that you stay under a limit of 20 tool calls and under about 100 sources. This is the absolute maximum upper limit. If you exceed this limit, the subagent will be terminated. Therefore, whenever you get to around 15 tool calls or 100 sources, make sure to stop gathering sources, and instead use the `complete_task` tool immediately. Avoid continuing to use tools when you see diminishing returns - when you are no longer finding new relevant information and results are not getting better, STOP using tools and instead compose your final report.\nAs soon as you have the necessary information, complete the task rather than wasting time by continuing research unnecessarily. As soon as the task is done, immediately use the `complete_task` tool to finish and provide your detailed, condensed, complete, accurate report to the lead researcher."
        }
      },
      "id": "5bcfff97-7dee-4e5f-8a1f-d58e92936726",
      "name": "Research Sub Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -280,
        860
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "toolDescription": "Scrapes content from a url and returns markdown format",
        "method": "POST",
        "url": "https://api.firecrawl.dev/v1/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer [API_KEY_HERE]"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"url\": \"{{$fromAI(\"url\")}}}\",\n  \"formats\": [\n    \"markdown\"\n  ],\n  \"onlyMainContent\": true,\n  \"parsePDF\": true,\n  \"maxAge\": 14400000\n}",
        "options": {
          "batching": {
            "batch": {}
          }
        }
      },
      "id": "0ee92e13-d751-4382-b032-6fa590ee9dd6",
      "name": "web_fetch",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        0,
        1140
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the internet to return content",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "Bearer [API_KEY_HERE]"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "parametersBody": {
          "values": [
            {
              "name": "query"
            },
            {
              "name": "search_depth",
              "valueProvider": "fieldValue",
              "value": "advanced"
            },
            {
              "name": "include_answer",
              "valueProvider": "fieldValue",
              "value": "advanced"
            },
            {
              "name": "max_results",
              "valueProvider": "fieldValue",
              "value": "15"
            },
            {
              "name": "include_raw_content",
              "valueProvider": "fieldValue",
              "value": "true"
            }
          ]
        }
      },
      "id": "f5cd1973-866b-4f41-9304-761faab197b1",
      "name": "Web_Search",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        80,
        1840
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the internet to return content",
        "method": "POST",
        "url": "https://api.firecrawl.dev/v1/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer [API_KEY_HERE]"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{{$fromAI(\"query\",\"the query to search the web\")}}\",\n  \"limit\": 5,\n  \"location\": \"\",\n  \"tbs\": \"\"\n  }",
        "options": {
          "batching": {
            "batch": {}
          }
        }
      },
      "id": "0b1deabf-329e-4ead-b879-b692df3f37d3",
      "name": "web_search",
      "type": "n8n-nodes-base.httpRequestTool",
      "position": [
        -160,
        1140
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-5-haiku-20241022",
          "mode": "list",
          "cachedResultName": "Claude Haiku 3.5"
        },
        "options": {}
      },
      "id": "f4d88baa-6596-4747-84e8-0813071297f9",
      "name": "Anthropic Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -360,
        1140
      ],
      "typeVersion": 1.3,
      "credentials": {
        "anthropicApi": {
          "id": "[API_KEY_HERE]",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "id": "b2e1710f-2d47-4cc1-83ac-a284023307fc",
      "name": "Anthropic Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "position": [
        -580,
        -140
      ],
      "typeVersion": 1.3,
      "credentials": {
        "anthropicApi": {
          "id": "[API_KEY_HERE]",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.searchQueries",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -220,
        -360
      ],
      "id": "f3d944e4-8e2a-4d06-b4f9-0ff200b97a9e",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DjCMvoDq0HzmSszX",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "prompt": "={{ $json['output.searchQueries'] }}"
          },
          "matchingColumns": [
            "prompt"
          ],
          "schema": [
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        20,
        -360
      ],
      "id": "d86d5930-aa7d-4a5a-911f-19679bf859f0",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "content": "## A different way to create parallel agent queries\n**Create an agent that just builds queries and then passes them in a workflow to a sub workflow. This a more deterministic approach",
        "height": 580,
        "width": 1160
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        -520
      ],
      "id": "eb0bf69f-a282-4604-a9ff-16da1f5b761c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Creating a prompt chain to force certain steps vs having an agent determine what subagents and tools to call\n**This is the MOST deterministic path but would not be well suited for general user interactions",
        "height": 1060,
        "width": 2000,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        980,
        -180
      ],
      "id": "8bbf3169-8e72-4c64-acc0-e4f204848e4e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Agentic System\n**This is an example of a lead agent and sub-agents working together to solve a problem. It has autonomy and can make certain decisions independent of a defined workflow. Prompts taken from Anthropics open source 'Deep Research' agent. Source: https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents/prompts",
        "height": 980,
        "width": 1780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1160,
        340
      ],
      "id": "3b485a65-8cd0-43db-b544-38c0282fd9c6",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "Query Builder": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Query Builder",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Research Leader": {
      "main": [
        [
          {
            "node": "Project Planner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Project Planner": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Project Planner",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Team of Research Assistants",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Team of Research Assistants": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Editor": {
      "main": [
        [
          {
            "node": "Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs": {
      "main": [
        [
          {
            "node": "Google Docs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Share URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs1": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Editor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "run_blocking_subagent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Research Sub Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "web_fetch": {
      "ai_tool": [
        [
          {
            "node": "Research Sub Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "web_search": {
      "ai_tool": [
        [
          {
            "node": "Research Sub Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Research Sub Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Query Builder",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "586bf7b1-ada6-4785-93a3-dbe6158b52d5",
  "meta": {
    "instanceId": "417d01568d9442a381ed5a25872e7ff95f9968a65187a65045ed8e625988b26f"
  },
  "id": "DjCMvoDq0HzmSszX",
  "tags": []
}