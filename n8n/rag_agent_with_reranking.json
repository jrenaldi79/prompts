{
  "name": "RAG Agent with Reranking",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -960,
        -224
      ],
      "id": "2ed0e1a1-4ce8-4673-884e-eb17306962da",
      "name": "When chat message received",
      "webhookId": "985c24b9-1032-41f3-bc8d-761da8cc09f4"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"result\": false,\n    \"explanation\": \"The document did not specify with certainty the answer and cited a chunk of text that doesn't seem to be wholly supportive of the answer\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        256,
        -128
      ],
      "id": "71d571e1-eafa-4fb3-8258-eb014a7bf2c9",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<query>\n{{ $('When chat message received').item.json.chatInput }}\n</query>\n<answer>\n{{ $json.output }}\n</answer>\n<observations>\n{{ $json.intermediateSteps.toJsonString() }}\n</observations>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are an answer evaluator for a question-answering system. Your task is to determine if a provided answer to a user's question is complete and well-supported by the given document context, taking into account the reasoning process of the main agent.  **Input:**  You will receive the input in XML format, with the following structure:  ```xml   <query>The user's original question.</query>   <answer>The answer generated by the system.  The document_id is embedded within this answer text.  It will be in the format: `document_id: [ID]`, where [ID] is the actual document ID.</answer> <observations>    Observations from the main agent that informed the answer with intermediate steps and content that was used to determine the answer. </observations> ```  Process:  Understand the Question: Carefully read the text within the <query> tag. Identify the key information being requested.  Analyze the Answer: Read the text within the <answer> tag.  Extract Document ID: Extract the document_id from the <answer> text.  Find the substring that starts with \"document_id: \" and extract the ID that follows it.  Review Observations: Read the text within the <observation> tag. This will give you context about how the answer was generated.   Compare Answer to Observation: Check if the answer is directly and fully supported by the information in the Observation text.  Assess Completeness: Determine if the answer completely addresses all parts of the query. Consider:  Are there any unanswered aspects of the question? Is the answer specific and detailed enough, or is it vague and general? Does the answer require additional context or information that is not present in the snippets? Are there any contradictions or inconsistencies between the answer, the snippets, and the observations? Does the answer contain any speculation or assumptions that are not supported by the snippets? Do the observations suggest any potential problems with the search process or the completeness of the answer?  Output: Output a boolean value of true if the answer is complete and well-supported with a high confidence interval. Output a boolean value of false if the answer is incomplete, vague, unsupported, or requires additional context.  Output an explanation for your assessment."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        64,
        -272
      ],
      "id": "d8bc3db5-1df3-41ff-b6e6-cb9afe769c22",
      "name": "Evaluator"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        64,
        -128
      ],
      "id": "6c6c369c-6d3c-4b5c-ae57-8e52d1a4e32c",
      "name": "Anthropic Chat Model2",
      "credentials": {
        "anthropicApi": {
          "id": "yD7a7X4b0kV9PiXh",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a helpful customer service assistant. Use the corpus of documents available to you in the tools. If you cannot answer the question appropriately given the data fetched by tools, just say so.\n\nUse the 'company-docs' tool to help answer user queries by searching internal documentation."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -720,
        -256
      ],
      "id": "5217ed0d-5a83-45c6-b648-4311c00e58ae",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -800,
        -48
      ],
      "id": "43e50e21-de7c-4d8c-bfb9-a13ae2859eb0",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "flZ3VabFlV6wrHU6",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -624,
        -48
      ],
      "id": "69021c8a-0ff3-48da-a9d7-78914f7bf2bf",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "query"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1744,
        128
      ],
      "id": "dbcd22f2-8259-41df-97e9-3fd1797bbd90",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "description": "Query internal company vector database containing a corpus of documents for RAG purposes",
        "workflowId": {
          "__rl": true,
          "value": "7J3465x51j2FgXa6",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}"
          },
          "matchingColumns": [
            "query"
          ],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -448,
        -48
      ],
      "id": "d9457918-320c-4d1c-9be7-8ca8c2e535b1",
      "name": "company-docs"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cohere.ai/v1/rerank",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer [API_KEY_HERE]"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"rerank-v3.5\",\n  \"query\": \"{{ $('When Executed by Another Workflow').item.json.query }}\",\n  \"documents\": {{ $json.appended_data.toJsonString() }},\n\"return_documents\": true\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -368,
        352
      ],
      "id": "0c5b84da-87d8-4a68-85ef-77a2c476f2b3",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "content",
              "separateBy": "other",
              "customSeparator": "--break--"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -992,
        352
      ],
      "id": "14d42714-87bf-4ab0-a90d-de42b7bd2d85",
      "name": "Summarize"
    },
    {
      "parameters": {
        "jsCode": "const rawData = $input.first().json.concatenated_document_pageContent;\n\n/**\n * Cleans and transforms the raw string data into an array of strings.\n * It splits the data by '--break--', trims whitespace from each chunk,\n * and filters out any resulting empty strings.\n */\nconst cleanedData = rawData\n  .split('--break--')\n  .map(chunk => chunk.trim())\n  .filter(chunk => chunk.length > 0);\n\n// Transform cleanedData to an array of items with {json: ...}\nreturn cleanedData.map(data => ({ json: { data } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -832,
        352
      ],
      "id": "284b1306-d21a-4ad0-9c73-71f0dcbf6990",
      "name": "Code"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "append",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -672,
        352
      ],
      "id": "7a967a82-96f7-410f-b79d-026f72684a83",
      "name": "Summarize1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2bf1440-d5de-4f15-a407-15a14739e199",
              "leftValue": "={{ $json.relevance_score }}",
              "rightValue": 0.3,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -32,
        352
      ],
      "id": "ad114b5a-3333-4fb2-96c3-4606f515cc05",
      "name": "Filter"
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -192,
        352
      ],
      "id": "a652791f-4335-43f2-98a8-4d0e53c2e77a",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "load",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "prompt": "={{ $json.query }}",
        "topK": 20,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        -1504,
        352
      ],
      "id": "b2ee1630-c64a-40ff-b450-dd3402d431bd",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "FELsCwnZWCd4vlKZ",
          "name": "AI Workshops"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "dimensions": 1536
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1504,
        528
      ],
      "id": "641652ce-6ab6-4243-a4aa-4464f12b9ca8",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "adiWLjNgVZGRUpgr",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Perform Semantic Search\nThis is a direct replacement for your tool that you originally wired up to your agent.",
        "height": 512,
        "width": 464,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1536,
        208
      ],
      "id": "514bd399-a63c-4708-ada2-d78ee7438aef",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Prepare Content for Rerank\nPrepare some data transformations that are required for the Cohere API. We need to send all of our documents in as an array.",
        "height": 512,
        "width": 512,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1040,
        208
      ],
      "id": "7ec29bdb-867b-4695-9853-21a1dd280564",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Rerank Results and Filter\nCall the Cohere API via HTTP Node and filter out irrelevant results. Output of final node is sent back as the tool call output to the main agent. Cohere v1 API spec: https://docs.cohere.com/v1/reference/rerank",
        "height": 512,
        "width": 672,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -496,
        208
      ],
      "id": "2877b81c-a0ab-472e-8c4f-13a118c10675",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Sample RAG Agent\nA simple example for how we wire it to a Reranked Semantic Search tool",
        "height": 544,
        "width": 960,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1040,
        -368
      ],
      "id": "18d15eb7-7d98-4cfb-9d0a-3540ac8f11cd",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Hybrid Search Node\nThis is going to replace your Semantic Search nodes below. Wire your trigger here and then connect the output to the **summarize** node below.",
        "height": 368,
        "width": 464
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1536,
        -208
      ],
      "id": "54cdc0b4-91c2-40e0-82c9-20dc88976b76",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a877134-2903-44af-9693-067b873a419e",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1264,
        -64
      ],
      "id": "218fb08f-fc72-4f07-9292-d8b62bea0066",
      "name": "Format Output"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a877134-2903-44af-9693-067b873a419e",
              "name": "content",
              "value": "={{ $json.document.pageContent }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1200,
        352
      ],
      "id": "f48c1570-c821-47c1-a16f-f6886c77a882",
      "name": "Format Output 2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rvanjzekflgqzfaovnsw.supabase.co/functions/v1/hybrid-search-test",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer [API_KEY_HERE]"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$json.query}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1424,
        -64
      ],
      "id": "8562220b-ae89-43f7-9606-74750c5f9294",
      "name": "Hybrid Search"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "query": "payment rejected for fraud reasons"
        }
      }
    ]
  },
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Evaluator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Evaluator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Evaluator": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        []
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "company-docs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "main": [
        [
          {
            "node": "Format Output 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Output": {
      "main": [
        []
      ]
    },
    "Format Output 2": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hybrid Search": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c70f226e-6449-4822-979b-59f39825732c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "417d01568d9442a381ed5a25872e7ff95f9968a65187a65045ed8e625988b26f"
  },
  "id": "z0XM9OeFsRGXS3Dx",
  "tags": []
}
